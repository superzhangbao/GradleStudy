apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId "com.ejkj.gradlestudy"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

//为应用程序添加第三方库依赖
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependence.libSupportV7
    implementation rootProject.ext.dependence.libSupportConstraint
    testImplementation rootProject.ext.dependence.junit
    androidTestImplementation rootProject.ext.dependence.libSupportTestRunner
    androidTestImplementation rootProject.ext.dependence.libSupportTestEspresso

    implementation(rootProject.ext.dependence.libSupportV7) {
        exclude module:'support-v4'//排除依赖
        transitive false//禁止传递依赖
    }
}
//this.getProjects()
//def getProjects() {
//    println '-------------------------'
//    println('App Project')
//    println '-------------------------'
//    def name = this.getParent().name
//    println "the parent project name is : ${name}"
//}

//文件拷贝
//copy {
//    from file('build/outputs/apk/') into 'E:/apk/' exclude {}  rename {}
//}

//对文件树进行遍历
//fileTree('build/outputs/apk/') {
//    FileTree fileTree ->
//        fileTree.visit {
//            FileTreeElement element ->
//                println 'the file name is:' + element.file.name
//                copy {
//                    from element.file
//                    into getRootProject().getBuildDir().path + '/test/'
//                }
//        }
//}


task(name: 'apkcopy') {
    doLast {
        //gradle的执行阶段去执行
        def sourcePath = this.buildDir.path + '/outputs/apk'
        def desationPath = 'E:/test/'
        def command = "mv -f ${sourcePath} ${desationPath}"
        exec {
            try {
                executable 'bash'
                args '-c',command
                println 'the command is execute success.'
            }catch (GradleException e) {
                println 'the command is execute failed.'
            }
        }
    }
}